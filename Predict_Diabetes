{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "df = pd.read_csv(\"F:\\\\My folder\\\\Intellipaat Advance Data Science\\\\Supervised learning_module\\\\diabetes.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 768 entries, 0 to 767\n",
      "Data columns (total 9 columns):\n",
      " #   Column                    Non-Null Count  Dtype  \n",
      "---  ------                    --------------  -----  \n",
      " 0   Pregnancies               768 non-null    int64  \n",
      " 1   Glucose                   768 non-null    int64  \n",
      " 2   BloodPressure             768 non-null    int64  \n",
      " 3   SkinThickness             768 non-null    int64  \n",
      " 4   Insulin                   768 non-null    int64  \n",
      " 5   BMI                       768 non-null    float64\n",
      " 6   DiabetesPedigreeFunction  768 non-null    float64\n",
      " 7   Age                       768 non-null    int64  \n",
      " 8   Outcome                   768 non-null    int64  \n",
      "dtypes: float64(2), int64(7)\n",
      "memory usage: 54.1 KB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Pregnancies</th>\n",
       "      <th>Glucose</th>\n",
       "      <th>BloodPressure</th>\n",
       "      <th>SkinThickness</th>\n",
       "      <th>Insulin</th>\n",
       "      <th>BMI</th>\n",
       "      <th>DiabetesPedigreeFunction</th>\n",
       "      <th>Age</th>\n",
       "      <th>Outcome</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>768.000000</td>\n",
       "      <td>768.000000</td>\n",
       "      <td>768.000000</td>\n",
       "      <td>768.000000</td>\n",
       "      <td>768.000000</td>\n",
       "      <td>768.000000</td>\n",
       "      <td>768.000000</td>\n",
       "      <td>768.000000</td>\n",
       "      <td>768.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>3.845052</td>\n",
       "      <td>120.894531</td>\n",
       "      <td>69.105469</td>\n",
       "      <td>20.536458</td>\n",
       "      <td>79.799479</td>\n",
       "      <td>31.992578</td>\n",
       "      <td>0.471876</td>\n",
       "      <td>33.240885</td>\n",
       "      <td>0.348958</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>3.369578</td>\n",
       "      <td>31.972618</td>\n",
       "      <td>19.355807</td>\n",
       "      <td>15.952218</td>\n",
       "      <td>115.244002</td>\n",
       "      <td>7.884160</td>\n",
       "      <td>0.331329</td>\n",
       "      <td>11.760232</td>\n",
       "      <td>0.476951</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.078000</td>\n",
       "      <td>21.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>99.000000</td>\n",
       "      <td>62.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>27.300000</td>\n",
       "      <td>0.243750</td>\n",
       "      <td>24.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>3.000000</td>\n",
       "      <td>117.000000</td>\n",
       "      <td>72.000000</td>\n",
       "      <td>23.000000</td>\n",
       "      <td>30.500000</td>\n",
       "      <td>32.000000</td>\n",
       "      <td>0.372500</td>\n",
       "      <td>29.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>6.000000</td>\n",
       "      <td>140.250000</td>\n",
       "      <td>80.000000</td>\n",
       "      <td>32.000000</td>\n",
       "      <td>127.250000</td>\n",
       "      <td>36.600000</td>\n",
       "      <td>0.626250</td>\n",
       "      <td>41.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>17.000000</td>\n",
       "      <td>199.000000</td>\n",
       "      <td>122.000000</td>\n",
       "      <td>99.000000</td>\n",
       "      <td>846.000000</td>\n",
       "      <td>67.100000</td>\n",
       "      <td>2.420000</td>\n",
       "      <td>81.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       Pregnancies     Glucose  BloodPressure  SkinThickness     Insulin  \\\n",
       "count   768.000000  768.000000     768.000000     768.000000  768.000000   \n",
       "mean      3.845052  120.894531      69.105469      20.536458   79.799479   \n",
       "std       3.369578   31.972618      19.355807      15.952218  115.244002   \n",
       "min       0.000000    0.000000       0.000000       0.000000    0.000000   \n",
       "25%       1.000000   99.000000      62.000000       0.000000    0.000000   \n",
       "50%       3.000000  117.000000      72.000000      23.000000   30.500000   \n",
       "75%       6.000000  140.250000      80.000000      32.000000  127.250000   \n",
       "max      17.000000  199.000000     122.000000      99.000000  846.000000   \n",
       "\n",
       "              BMI  DiabetesPedigreeFunction         Age     Outcome  \n",
       "count  768.000000                768.000000  768.000000  768.000000  \n",
       "mean    31.992578                  0.471876   33.240885    0.348958  \n",
       "std      7.884160                  0.331329   11.760232    0.476951  \n",
       "min      0.000000                  0.078000   21.000000    0.000000  \n",
       "25%     27.300000                  0.243750   24.000000    0.000000  \n",
       "50%     32.000000                  0.372500   29.000000    0.000000  \n",
       "75%     36.600000                  0.626250   41.000000    1.000000  \n",
       "max     67.100000                  2.420000   81.000000    1.000000  "
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Pregnancies</th>\n",
       "      <th>Glucose</th>\n",
       "      <th>BloodPressure</th>\n",
       "      <th>SkinThickness</th>\n",
       "      <th>Insulin</th>\n",
       "      <th>BMI</th>\n",
       "      <th>DiabetesPedigreeFunction</th>\n",
       "      <th>Age</th>\n",
       "      <th>Outcome</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Pregnancies</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.129459</td>\n",
       "      <td>0.141282</td>\n",
       "      <td>-0.081672</td>\n",
       "      <td>-0.073535</td>\n",
       "      <td>0.017683</td>\n",
       "      <td>-0.033523</td>\n",
       "      <td>0.544341</td>\n",
       "      <td>0.221898</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Glucose</th>\n",
       "      <td>0.129459</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.152590</td>\n",
       "      <td>0.057328</td>\n",
       "      <td>0.331357</td>\n",
       "      <td>0.221071</td>\n",
       "      <td>0.137337</td>\n",
       "      <td>0.263514</td>\n",
       "      <td>0.466581</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>BloodPressure</th>\n",
       "      <td>0.141282</td>\n",
       "      <td>0.152590</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.207371</td>\n",
       "      <td>0.088933</td>\n",
       "      <td>0.281805</td>\n",
       "      <td>0.041265</td>\n",
       "      <td>0.239528</td>\n",
       "      <td>0.065068</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>SkinThickness</th>\n",
       "      <td>-0.081672</td>\n",
       "      <td>0.057328</td>\n",
       "      <td>0.207371</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.436783</td>\n",
       "      <td>0.392573</td>\n",
       "      <td>0.183928</td>\n",
       "      <td>-0.113970</td>\n",
       "      <td>0.074752</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Insulin</th>\n",
       "      <td>-0.073535</td>\n",
       "      <td>0.331357</td>\n",
       "      <td>0.088933</td>\n",
       "      <td>0.436783</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.197859</td>\n",
       "      <td>0.185071</td>\n",
       "      <td>-0.042163</td>\n",
       "      <td>0.130548</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>BMI</th>\n",
       "      <td>0.017683</td>\n",
       "      <td>0.221071</td>\n",
       "      <td>0.281805</td>\n",
       "      <td>0.392573</td>\n",
       "      <td>0.197859</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.140647</td>\n",
       "      <td>0.036242</td>\n",
       "      <td>0.292695</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>DiabetesPedigreeFunction</th>\n",
       "      <td>-0.033523</td>\n",
       "      <td>0.137337</td>\n",
       "      <td>0.041265</td>\n",
       "      <td>0.183928</td>\n",
       "      <td>0.185071</td>\n",
       "      <td>0.140647</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.033561</td>\n",
       "      <td>0.173844</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Age</th>\n",
       "      <td>0.544341</td>\n",
       "      <td>0.263514</td>\n",
       "      <td>0.239528</td>\n",
       "      <td>-0.113970</td>\n",
       "      <td>-0.042163</td>\n",
       "      <td>0.036242</td>\n",
       "      <td>0.033561</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.238356</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Outcome</th>\n",
       "      <td>0.221898</td>\n",
       "      <td>0.466581</td>\n",
       "      <td>0.065068</td>\n",
       "      <td>0.074752</td>\n",
       "      <td>0.130548</td>\n",
       "      <td>0.292695</td>\n",
       "      <td>0.173844</td>\n",
       "      <td>0.238356</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                          Pregnancies   Glucose  BloodPressure  SkinThickness  \\\n",
       "Pregnancies                  1.000000  0.129459       0.141282      -0.081672   \n",
       "Glucose                      0.129459  1.000000       0.152590       0.057328   \n",
       "BloodPressure                0.141282  0.152590       1.000000       0.207371   \n",
       "SkinThickness               -0.081672  0.057328       0.207371       1.000000   \n",
       "Insulin                     -0.073535  0.331357       0.088933       0.436783   \n",
       "BMI                          0.017683  0.221071       0.281805       0.392573   \n",
       "DiabetesPedigreeFunction    -0.033523  0.137337       0.041265       0.183928   \n",
       "Age                          0.544341  0.263514       0.239528      -0.113970   \n",
       "Outcome                      0.221898  0.466581       0.065068       0.074752   \n",
       "\n",
       "                           Insulin       BMI  DiabetesPedigreeFunction  \\\n",
       "Pregnancies              -0.073535  0.017683                 -0.033523   \n",
       "Glucose                   0.331357  0.221071                  0.137337   \n",
       "BloodPressure             0.088933  0.281805                  0.041265   \n",
       "SkinThickness             0.436783  0.392573                  0.183928   \n",
       "Insulin                   1.000000  0.197859                  0.185071   \n",
       "BMI                       0.197859  1.000000                  0.140647   \n",
       "DiabetesPedigreeFunction  0.185071  0.140647                  1.000000   \n",
       "Age                      -0.042163  0.036242                  0.033561   \n",
       "Outcome                   0.130548  0.292695                  0.173844   \n",
       "\n",
       "                               Age   Outcome  \n",
       "Pregnancies               0.544341  0.221898  \n",
       "Glucose                   0.263514  0.466581  \n",
       "BloodPressure             0.239528  0.065068  \n",
       "SkinThickness            -0.113970  0.074752  \n",
       "Insulin                  -0.042163  0.130548  \n",
       "BMI                       0.036242  0.292695  \n",
       "DiabetesPedigreeFunction  0.033561  0.173844  \n",
       "Age                       1.000000  0.238356  \n",
       "Outcome                   0.238356  1.000000  "
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.corr()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Pregnancies                 0\n",
       "Glucose                     0\n",
       "BloodPressure               0\n",
       "SkinThickness               0\n",
       "Insulin                     0\n",
       "BMI                         0\n",
       "DiabetesPedigreeFunction    0\n",
       "Age                         0\n",
       "Outcome                     0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.hist(df.Age, bins = 10)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "from statsmodels.stats.outliers_influence import variance_inflation_factor"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                    feature        VIF\n",
      "0               Pregnancies   3.364416\n",
      "1                   Glucose  18.030209\n",
      "2             BloodPressure  15.313159\n",
      "3             SkinThickness   4.008709\n",
      "4                   Insulin   2.063940\n",
      "5                       BMI  18.515112\n",
      "6  DiabetesPedigreeFunction   3.213450\n",
      "7                       Age  13.500531\n",
      "8                   Outcome   1.948398\n"
     ]
    }
   ],
   "source": [
    "vif_data=pd.DataFrame()\n",
    "vif_data['feature']=df.columns\n",
    "vif_data[\"VIF\"]=[variance_inflation_factor(df.values,i) for i in range(len(df.columns))]\n",
    "print(vif_data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\vijay.varadharajan\\AppData\\Local\\Continuum\\anaconda3\\lib\\site-packages\\ipykernel_launcher.py:2: UserWarning: Pandas doesn't allow columns to be created via a new attribute name - see https://pandas.pydata.org/pandas-docs/stable/indexing.html#attribute-access\n",
      "  \n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Pregnancies</th>\n",
       "      <th>SkinThickness</th>\n",
       "      <th>Insulin</th>\n",
       "      <th>DiabetesPedigreeFunction</th>\n",
       "      <th>Outcome</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>6</td>\n",
       "      <td>35</td>\n",
       "      <td>0</td>\n",
       "      <td>0.627</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>29</td>\n",
       "      <td>0</td>\n",
       "      <td>0.351</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>8</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.672</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>23</td>\n",
       "      <td>94</td>\n",
       "      <td>0.167</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>35</td>\n",
       "      <td>168</td>\n",
       "      <td>2.288</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>763</th>\n",
       "      <td>10</td>\n",
       "      <td>48</td>\n",
       "      <td>180</td>\n",
       "      <td>0.171</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>764</th>\n",
       "      <td>2</td>\n",
       "      <td>27</td>\n",
       "      <td>0</td>\n",
       "      <td>0.340</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>765</th>\n",
       "      <td>5</td>\n",
       "      <td>23</td>\n",
       "      <td>112</td>\n",
       "      <td>0.245</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>766</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.349</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>767</th>\n",
       "      <td>1</td>\n",
       "      <td>31</td>\n",
       "      <td>0</td>\n",
       "      <td>0.315</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>768 rows × 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     Pregnancies  SkinThickness  Insulin  DiabetesPedigreeFunction  Outcome\n",
       "0              6             35        0                     0.627        1\n",
       "1              1             29        0                     0.351        0\n",
       "2              8              0        0                     0.672        1\n",
       "3              1             23       94                     0.167        0\n",
       "4              0             35      168                     2.288        1\n",
       "..           ...            ...      ...                       ...      ...\n",
       "763           10             48      180                     0.171        0\n",
       "764            2             27        0                     0.340        0\n",
       "765            5             23      112                     0.245        0\n",
       "766            1              0        0                     0.349        1\n",
       "767            1             31        0                     0.315        0\n",
       "\n",
       "[768 rows x 5 columns]"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# remove VIF variable above the score of 6 - column name Glucose, Bloodpressure, BMI\n",
    "df.new = df.drop(columns={'Glucose','BloodPressure','BMI','Age'})\n",
    "df.new"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                    feature       VIF\n",
      "0               Pregnancies  1.847868\n",
      "1             SkinThickness  2.748220\n",
      "2                   Insulin  1.878005\n",
      "3  DiabetesPedigreeFunction  2.479356\n",
      "4                   Outcome  1.692530\n"
     ]
    }
   ],
   "source": [
    "vif_data1=pd.DataFrame()\n",
    "vif_data1['feature']=df.new.columns\n",
    "vif_data1[\"VIF\"]=[variance_inflation_factor(df.new.values,i) for i in range(len(df.new.columns))]\n",
    "print(vif_data1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Pregnancies</th>\n",
       "      <th>Glucose</th>\n",
       "      <th>BloodPressure</th>\n",
       "      <th>SkinThickness</th>\n",
       "      <th>Insulin</th>\n",
       "      <th>BMI</th>\n",
       "      <th>DiabetesPedigreeFunction</th>\n",
       "      <th>Age</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>6</td>\n",
       "      <td>148</td>\n",
       "      <td>72</td>\n",
       "      <td>35</td>\n",
       "      <td>0</td>\n",
       "      <td>33.6</td>\n",
       "      <td>0.627</td>\n",
       "      <td>50</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>85</td>\n",
       "      <td>66</td>\n",
       "      <td>29</td>\n",
       "      <td>0</td>\n",
       "      <td>26.6</td>\n",
       "      <td>0.351</td>\n",
       "      <td>31</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>8</td>\n",
       "      <td>183</td>\n",
       "      <td>64</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>23.3</td>\n",
       "      <td>0.672</td>\n",
       "      <td>32</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>89</td>\n",
       "      <td>66</td>\n",
       "      <td>23</td>\n",
       "      <td>94</td>\n",
       "      <td>28.1</td>\n",
       "      <td>0.167</td>\n",
       "      <td>21</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>137</td>\n",
       "      <td>40</td>\n",
       "      <td>35</td>\n",
       "      <td>168</td>\n",
       "      <td>43.1</td>\n",
       "      <td>2.288</td>\n",
       "      <td>33</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>763</th>\n",
       "      <td>10</td>\n",
       "      <td>101</td>\n",
       "      <td>76</td>\n",
       "      <td>48</td>\n",
       "      <td>180</td>\n",
       "      <td>32.9</td>\n",
       "      <td>0.171</td>\n",
       "      <td>63</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>764</th>\n",
       "      <td>2</td>\n",
       "      <td>122</td>\n",
       "      <td>70</td>\n",
       "      <td>27</td>\n",
       "      <td>0</td>\n",
       "      <td>36.8</td>\n",
       "      <td>0.340</td>\n",
       "      <td>27</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>765</th>\n",
       "      <td>5</td>\n",
       "      <td>121</td>\n",
       "      <td>72</td>\n",
       "      <td>23</td>\n",
       "      <td>112</td>\n",
       "      <td>26.2</td>\n",
       "      <td>0.245</td>\n",
       "      <td>30</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>766</th>\n",
       "      <td>1</td>\n",
       "      <td>126</td>\n",
       "      <td>60</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>30.1</td>\n",
       "      <td>0.349</td>\n",
       "      <td>47</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>767</th>\n",
       "      <td>1</td>\n",
       "      <td>93</td>\n",
       "      <td>70</td>\n",
       "      <td>31</td>\n",
       "      <td>0</td>\n",
       "      <td>30.4</td>\n",
       "      <td>0.315</td>\n",
       "      <td>23</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>768 rows × 8 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     Pregnancies  Glucose  BloodPressure  SkinThickness  Insulin   BMI  \\\n",
       "0              6      148             72             35        0  33.6   \n",
       "1              1       85             66             29        0  26.6   \n",
       "2              8      183             64              0        0  23.3   \n",
       "3              1       89             66             23       94  28.1   \n",
       "4              0      137             40             35      168  43.1   \n",
       "..           ...      ...            ...            ...      ...   ...   \n",
       "763           10      101             76             48      180  32.9   \n",
       "764            2      122             70             27        0  36.8   \n",
       "765            5      121             72             23      112  26.2   \n",
       "766            1      126             60              0        0  30.1   \n",
       "767            1       93             70             31        0  30.4   \n",
       "\n",
       "     DiabetesPedigreeFunction  Age  \n",
       "0                       0.627   50  \n",
       "1                       0.351   31  \n",
       "2                       0.672   32  \n",
       "3                       0.167   21  \n",
       "4                       2.288   33  \n",
       "..                        ...  ...  \n",
       "763                     0.171   63  \n",
       "764                     0.340   27  \n",
       "765                     0.245   30  \n",
       "766                     0.349   47  \n",
       "767                     0.315   23  \n",
       "\n",
       "[768 rows x 8 columns]"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_x = df.drop(columns ='Outcome')\n",
    "df_x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0      1\n",
       "1      0\n",
       "2      1\n",
       "3      0\n",
       "4      1\n",
       "      ..\n",
       "763    0\n",
       "764    0\n",
       "765    0\n",
       "766    1\n",
       "767    0\n",
       "Name: Outcome, Length: 768, dtype: int64"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_y = df.Outcome\n",
    "df_y"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Divide the dataset into two parts for training and testing in 70% and 30% proportion"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.linear_model import LogisticRegression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "x_train,x_test,y_train,y_test=train_test_split(df_x,df_y,train_size=0.7,random_state=2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(231,)"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_test.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Pregnancies</th>\n",
       "      <th>Glucose</th>\n",
       "      <th>BloodPressure</th>\n",
       "      <th>SkinThickness</th>\n",
       "      <th>Insulin</th>\n",
       "      <th>BMI</th>\n",
       "      <th>DiabetesPedigreeFunction</th>\n",
       "      <th>Age</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>501</th>\n",
       "      <td>3</td>\n",
       "      <td>84</td>\n",
       "      <td>72</td>\n",
       "      <td>32</td>\n",
       "      <td>0</td>\n",
       "      <td>37.2</td>\n",
       "      <td>0.267</td>\n",
       "      <td>28</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>371</th>\n",
       "      <td>0</td>\n",
       "      <td>118</td>\n",
       "      <td>64</td>\n",
       "      <td>23</td>\n",
       "      <td>89</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.731</td>\n",
       "      <td>21</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>634</th>\n",
       "      <td>10</td>\n",
       "      <td>92</td>\n",
       "      <td>62</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>25.9</td>\n",
       "      <td>0.167</td>\n",
       "      <td>31</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>221</th>\n",
       "      <td>2</td>\n",
       "      <td>158</td>\n",
       "      <td>90</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>31.6</td>\n",
       "      <td>0.805</td>\n",
       "      <td>66</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>10</td>\n",
       "      <td>139</td>\n",
       "      <td>80</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>27.1</td>\n",
       "      <td>1.441</td>\n",
       "      <td>57</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     Pregnancies  Glucose  BloodPressure  SkinThickness  Insulin   BMI  \\\n",
       "501            3       84             72             32        0  37.2   \n",
       "371            0      118             64             23       89   0.0   \n",
       "634           10       92             62              0        0  25.9   \n",
       "221            2      158             90              0        0  31.6   \n",
       "12            10      139             80              0        0  27.1   \n",
       "\n",
       "     DiabetesPedigreeFunction  Age  \n",
       "501                     0.267   28  \n",
       "371                     1.731   21  \n",
       "634                     0.167   31  \n",
       "221                     0.805   66  \n",
       "12                      1.441   57  "
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x_train.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "logmodel=LogisticRegression()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\vijay.varadharajan\\AppData\\Local\\Continuum\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:765: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  extra_warning_msg=_LOGISTIC_SOLVER_CONVERGENCE_MSG)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "LogisticRegression()"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "logmodel.fit(x_train,y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "prediction=logmodel.predict(x_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1,\n",
       "       0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0,\n",
       "       0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0,\n",
       "       1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,\n",
       "       0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0,\n",
       "       0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,\n",
       "       0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0,\n",
       "       1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0,\n",
       "       0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1,\n",
       "       1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0], dtype=int64)"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "prediction"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.metrics import confusion_matrix,accuracy_score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.7619047619047619"
      ]
     },
     "execution_count": 56,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "log_reg_score = accuracy_score(y_test,prediction)\n",
    "log_reg_score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[139,  16],\n",
       "       [ 39,  37]], dtype=int64)"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "confusion_matrix(y_test,prediction)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [],
   "source": [
    "#accuracy tn+tp/(tp+tn+fp+fn)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.7619047619047619"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(139+37)/(139+16+39+37)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Assignment : Random Forest Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.ensemble import RandomForestClassifier\n",
    "\n",
    "rf = RandomForestClassifier(random_state = 42)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [],
   "source": [
    "rf1=rf.fit(x_train,y_train) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [],
   "source": [
    "y_pred=rf1.predict(x_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.7792207792207793"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.metrics import accuracy_score\n",
    "accuracy_score(y_pred,y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import RandomizedSearchCV"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'n_estimators': [200, 400, 600, 800, 1000, 1200, 1400, 1600, 1800, 2000], 'max_features': ['auto', 'sqrt'], 'max_depth': [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, None], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4], 'bootstrap': [True, False]}\n"
     ]
    }
   ],
   "source": [
    "n_estimators = [int(x) for x in np.linspace(start = 200, stop = 2000, num = 10)]\n",
    "# Number of features to consider at every split\n",
    "max_features = ['auto', 'sqrt']\n",
    "# Maximum number of levels in tree\n",
    "max_depth = [int(x) for x in np.linspace(10, 110, num = 11)]\n",
    "max_depth.append(None)\n",
    "# Minimum number of samples required to split a node\n",
    "min_samples_split = [2, 5, 10]\n",
    "# Minimum number of samples required at each leaf node\n",
    "min_samples_leaf = [1, 2, 4]\n",
    "# Method of selecting samples for training each tree\n",
    "bootstrap = [True, False]\n",
    "\n",
    "# Create the random grid\n",
    "random_grid = {'n_estimators': n_estimators,\n",
    "               'max_features': max_features,\n",
    "               'max_depth': max_depth,\n",
    "               'min_samples_split': min_samples_split,\n",
    "               'min_samples_leaf': min_samples_leaf,\n",
    "               'bootstrap': bootstrap}\n",
    "\n",
    "print(random_grid)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitting 3 folds for each of 100 candidates, totalling 300 fits\n"
     ]
    }
   ],
   "source": [
    "rf = RandomForestClassifier(random_state = 42)\n",
    "# Random search of parameters, using 3 fold cross validation, \n",
    "# search across 100 different combinations, and use all available cores\n",
    "rf_random = RandomizedSearchCV(estimator=rf, param_distributions=random_grid,\n",
    "                              n_iter = 100, scoring='neg_mean_absolute_error', \n",
    "                              cv = 3, verbose=2, random_state=42, n_jobs=-1,\n",
    "                              return_train_score=True)\n",
    "\n",
    "# Fit the random search model\n",
    "rf2=rf_random.fit(x_train, y_train);"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'n_estimators': 800,\n",
       " 'min_samples_split': 2,\n",
       " 'min_samples_leaf': 4,\n",
       " 'max_features': 'sqrt',\n",
       " 'max_depth': 90,\n",
       " 'bootstrap': True}"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rf2.best_params_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [],
   "source": [
    "y_pred=rf2.predict(x_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.7662337662337663"
      ]
     },
     "execution_count": 58,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.metrics import accuracy_score\n",
    "rf_score = accuracy_score(y_pred,y_test)\n",
    "rf_score"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Decision Tree Assignment "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn import tree"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [],
   "source": [
    "clf = tree.DecisionTreeClassifier()\n",
    "clf = clf.fit(x_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[Text(170.521,216.424,'X[1] <= 127.5\\ngini = 0.459\\nsamples = 537\\nvalue = [345, 192]'),\n",
       " Text(69.0487,200.393,'X[7] <= 28.5\\ngini = 0.313\\nsamples = 330\\nvalue = [266, 64]'),\n",
       " Text(20.5454,184.361,'X[5] <= 45.4\\ngini = 0.16\\nsamples = 182\\nvalue = [166, 16]'),\n",
       " Text(16.8098,168.33,'X[5] <= 30.9\\ngini = 0.135\\nsamples = 179\\nvalue = [166, 13]'),\n",
       " Text(13.0743,152.299,'gini = 0.0\\nsamples = 100\\nvalue = [100, 0]'),\n",
       " Text(20.5454,152.299,'X[3] <= 5.5\\ngini = 0.275\\nsamples = 79\\nvalue = [66, 13]'),\n",
       " Text(7.47104,136.267,'X[1] <= 110.0\\ngini = 0.473\\nsamples = 13\\nvalue = [8, 5]'),\n",
       " Text(3.73552,120.236,'gini = 0.0\\nsamples = 7\\nvalue = [7, 0]'),\n",
       " Text(11.2066,120.236,'X[6] <= 0.799\\ngini = 0.278\\nsamples = 6\\nvalue = [1, 5]'),\n",
       " Text(7.47104,104.204,'gini = 0.0\\nsamples = 5\\nvalue = [0, 5]'),\n",
       " Text(14.9421,104.204,'gini = 0.0\\nsamples = 1\\nvalue = [1, 0]'),\n",
       " Text(33.6197,136.267,'X[6] <= 0.501\\ngini = 0.213\\nsamples = 66\\nvalue = [58, 8]'),\n",
       " Text(26.1486,120.236,'X[5] <= 31.1\\ngini = 0.049\\nsamples = 40\\nvalue = [39, 1]'),\n",
       " Text(22.4131,104.204,'gini = 0.0\\nsamples = 1\\nvalue = [0, 1]'),\n",
       " Text(29.8842,104.204,'gini = 0.0\\nsamples = 39\\nvalue = [39, 0]'),\n",
       " Text(41.0907,120.236,'X[1] <= 116.0\\ngini = 0.393\\nsamples = 26\\nvalue = [19, 7]'),\n",
       " Text(37.3552,104.204,'X[5] <= 32.7\\ngini = 0.465\\nsamples = 19\\nvalue = [12, 7]'),\n",
       " Text(33.6197,88.1729,'gini = 0.0\\nsamples = 6\\nvalue = [6, 0]'),\n",
       " Text(41.0907,88.1729,'X[2] <= 61.0\\ngini = 0.497\\nsamples = 13\\nvalue = [6, 7]'),\n",
       " Text(37.3552,72.1414,'gini = 0.0\\nsamples = 3\\nvalue = [3, 0]'),\n",
       " Text(44.8262,72.1414,'X[5] <= 34.3\\ngini = 0.42\\nsamples = 10\\nvalue = [3, 7]'),\n",
       " Text(41.0907,56.11,'gini = 0.0\\nsamples = 4\\nvalue = [0, 4]'),\n",
       " Text(48.5617,56.11,'X[3] <= 40.0\\ngini = 0.5\\nsamples = 6\\nvalue = [3, 3]'),\n",
       " Text(44.8262,40.0786,'X[5] <= 37.4\\ngini = 0.375\\nsamples = 4\\nvalue = [3, 1]'),\n",
       " Text(41.0907,24.0471,'gini = 0.0\\nsamples = 3\\nvalue = [3, 0]'),\n",
       " Text(48.5617,24.0471,'gini = 0.0\\nsamples = 1\\nvalue = [0, 1]'),\n",
       " Text(52.2973,40.0786,'gini = 0.0\\nsamples = 2\\nvalue = [0, 2]'),\n",
       " Text(44.8262,104.204,'gini = 0.0\\nsamples = 7\\nvalue = [7, 0]'),\n",
       " Text(24.2809,168.33,'gini = 0.0\\nsamples = 3\\nvalue = [0, 3]'),\n",
       " Text(117.552,184.361,'X[5] <= 26.35\\ngini = 0.438\\nsamples = 148\\nvalue = [100, 48]'),\n",
       " Text(101.326,168.33,'X[5] <= 9.65\\ngini = 0.117\\nsamples = 32\\nvalue = [30, 2]'),\n",
       " Text(97.5904,152.299,'gini = 0.0\\nsamples = 2\\nvalue = [0, 2]'),\n",
       " Text(105.061,152.299,'gini = 0.0\\nsamples = 30\\nvalue = [30, 0]'),\n",
       " Text(133.778,168.33,'X[6] <= 0.613\\ngini = 0.479\\nsamples = 116\\nvalue = [70, 46]'),\n",
       " Text(112.533,152.299,'X[2] <= 83.0\\ngini = 0.422\\nsamples = 86\\nvalue = [60, 26]'),\n",
       " Text(108.797,136.267,'X[6] <= 0.421\\ngini = 0.467\\nsamples = 70\\nvalue = [44, 26]'),\n",
       " Text(94.3219,120.236,'X[3] <= 36.0\\ngini = 0.496\\nsamples = 53\\nvalue = [29, 24]'),\n",
       " Text(84.0492,104.204,'X[6] <= 0.288\\ngini = 0.493\\nsamples = 41\\nvalue = [18, 23]'),\n",
       " Text(74.7104,88.1729,'X[1] <= 110.5\\ngini = 0.49\\nsamples = 28\\nvalue = [16, 12]'),\n",
       " Text(67.2393,72.1414,'X[7] <= 36.5\\ngini = 0.32\\nsamples = 15\\nvalue = [12, 3]'),\n",
       " Text(63.5038,56.11,'X[7] <= 30.0\\ngini = 0.5\\nsamples = 6\\nvalue = [3, 3]'),\n",
       " Text(59.7683,40.0786,'gini = 0.0\\nsamples = 2\\nvalue = [2, 0]'),\n",
       " Text(67.2393,40.0786,'X[0] <= 3.5\\ngini = 0.375\\nsamples = 4\\nvalue = [1, 3]'),\n",
       " Text(63.5038,24.0471,'gini = 0.0\\nsamples = 1\\nvalue = [1, 0]'),\n",
       " Text(70.9749,24.0471,'gini = 0.0\\nsamples = 3\\nvalue = [0, 3]'),\n",
       " Text(70.9749,56.11,'gini = 0.0\\nsamples = 9\\nvalue = [9, 0]'),\n",
       " Text(82.1814,72.1414,'X[1] <= 120.5\\ngini = 0.426\\nsamples = 13\\nvalue = [4, 9]'),\n",
       " Text(78.4459,56.11,'gini = 0.0\\nsamples = 6\\nvalue = [0, 6]'),\n",
       " Text(85.9169,56.11,'X[6] <= 0.242\\ngini = 0.49\\nsamples = 7\\nvalue = [4, 3]'),\n",
       " Text(82.1814,40.0786,'X[0] <= 3.0\\ngini = 0.375\\nsamples = 4\\nvalue = [1, 3]'),\n",
       " Text(78.4459,24.0471,'gini = 0.0\\nsamples = 1\\nvalue = [1, 0]'),\n",
       " Text(85.9169,24.0471,'gini = 0.0\\nsamples = 3\\nvalue = [0, 3]'),\n",
       " Text(89.6525,40.0786,'gini = 0.0\\nsamples = 3\\nvalue = [3, 0]'),\n",
       " Text(93.388,88.1729,'X[6] <= 0.385\\ngini = 0.26\\nsamples = 13\\nvalue = [2, 11]'),\n",
       " Text(89.6525,72.1414,'gini = 0.0\\nsamples = 10\\nvalue = [0, 10]'),\n",
       " Text(97.1235,72.1414,'X[7] <= 43.5\\ngini = 0.444\\nsamples = 3\\nvalue = [2, 1]'),\n",
       " Text(93.388,56.11,'gini = 0.0\\nsamples = 2\\nvalue = [2, 0]'),\n",
       " Text(100.859,56.11,'gini = 0.0\\nsamples = 1\\nvalue = [0, 1]'),\n",
       " Text(104.595,104.204,'X[2] <= 64.0\\ngini = 0.153\\nsamples = 12\\nvalue = [11, 1]'),\n",
       " Text(100.859,88.1729,'gini = 0.0\\nsamples = 1\\nvalue = [0, 1]'),\n",
       " Text(108.33,88.1729,'gini = 0.0\\nsamples = 11\\nvalue = [11, 0]'),\n",
       " Text(123.272,120.236,'X[0] <= 11.5\\ngini = 0.208\\nsamples = 17\\nvalue = [15, 2]'),\n",
       " Text(119.537,104.204,'X[0] <= 2.0\\ngini = 0.117\\nsamples = 16\\nvalue = [15, 1]'),\n",
       " Text(115.801,88.1729,'X[4] <= 146.0\\ngini = 0.5\\nsamples = 2\\nvalue = [1, 1]'),\n",
       " Text(112.066,72.1414,'gini = 0.0\\nsamples = 1\\nvalue = [0, 1]'),\n",
       " Text(119.537,72.1414,'gini = 0.0\\nsamples = 1\\nvalue = [1, 0]'),\n",
       " Text(123.272,88.1729,'gini = 0.0\\nsamples = 14\\nvalue = [14, 0]'),\n",
       " Text(127.008,104.204,'gini = 0.0\\nsamples = 1\\nvalue = [0, 1]'),\n",
       " Text(116.268,136.267,'gini = 0.0\\nsamples = 16\\nvalue = [16, 0]'),\n",
       " Text(155.024,152.299,'X[0] <= 5.5\\ngini = 0.444\\nsamples = 30\\nvalue = [10, 20]'),\n",
       " Text(145.685,136.267,'X[4] <= 120.5\\ngini = 0.492\\nsamples = 16\\nvalue = [9, 7]'),\n",
       " Text(138.214,120.236,'X[2] <= 71.0\\ngini = 0.32\\nsamples = 10\\nvalue = [8, 2]'),\n",
       " Text(134.479,104.204,'gini = 0.0\\nsamples = 5\\nvalue = [5, 0]'),\n",
       " Text(141.95,104.204,'X[4] <= 28.5\\ngini = 0.48\\nsamples = 5\\nvalue = [3, 2]'),\n",
       " Text(138.214,88.1729,'gini = 0.0\\nsamples = 2\\nvalue = [0, 2]'),\n",
       " Text(145.685,88.1729,'gini = 0.0\\nsamples = 3\\nvalue = [3, 0]'),\n",
       " Text(153.156,120.236,'X[3] <= 47.5\\ngini = 0.278\\nsamples = 6\\nvalue = [1, 5]'),\n",
       " Text(149.421,104.204,'gini = 0.0\\nsamples = 5\\nvalue = [0, 5]'),\n",
       " Text(156.892,104.204,'gini = 0.0\\nsamples = 1\\nvalue = [1, 0]'),\n",
       " Text(164.363,136.267,'X[1] <= 86.5\\ngini = 0.133\\nsamples = 14\\nvalue = [1, 13]'),\n",
       " Text(160.627,120.236,'gini = 0.0\\nsamples = 1\\nvalue = [1, 0]'),\n",
       " Text(168.098,120.236,'gini = 0.0\\nsamples = 13\\nvalue = [0, 13]'),\n",
       " Text(271.992,200.393,'X[1] <= 159.5\\ngini = 0.472\\nsamples = 207\\nvalue = [79, 128]'),\n",
       " Text(215.259,184.361,'X[5] <= 27.8\\ngini = 0.5\\nsamples = 133\\nvalue = [67, 66]'),\n",
       " Text(184.908,168.33,'X[2] <= 56.0\\ngini = 0.312\\nsamples = 31\\nvalue = [25, 6]'),\n",
       " Text(175.569,152.299,'X[1] <= 137.0\\ngini = 0.444\\nsamples = 3\\nvalue = [1, 2]'),\n",
       " Text(171.834,136.267,'gini = 0.0\\nsamples = 1\\nvalue = [1, 0]'),\n",
       " Text(179.305,136.267,'gini = 0.0\\nsamples = 2\\nvalue = [0, 2]'),\n",
       " Text(194.247,152.299,'X[3] <= 27.5\\ngini = 0.245\\nsamples = 28\\nvalue = [24, 4]'),\n",
       " Text(186.776,136.267,'X[7] <= 52.0\\ngini = 0.147\\nsamples = 25\\nvalue = [23, 2]'),\n",
       " Text(183.04,120.236,'gini = 0.0\\nsamples = 17\\nvalue = [17, 0]'),\n",
       " Text(190.511,120.236,'X[1] <= 150.5\\ngini = 0.375\\nsamples = 8\\nvalue = [6, 2]'),\n",
       " Text(186.776,104.204,'X[0] <= 4.5\\ngini = 0.245\\nsamples = 7\\nvalue = [6, 1]'),\n",
       " Text(183.04,88.1729,'X[1] <= 131.0\\ngini = 0.5\\nsamples = 2\\nvalue = [1, 1]'),\n",
       " Text(179.305,72.1414,'gini = 0.0\\nsamples = 1\\nvalue = [1, 0]'),\n",
       " Text(186.776,72.1414,'gini = 0.0\\nsamples = 1\\nvalue = [0, 1]'),\n",
       " Text(190.511,88.1729,'gini = 0.0\\nsamples = 5\\nvalue = [5, 0]'),\n",
       " Text(194.247,104.204,'gini = 0.0\\nsamples = 1\\nvalue = [0, 1]'),\n",
       " Text(201.718,136.267,'X[3] <= 33.5\\ngini = 0.444\\nsamples = 3\\nvalue = [1, 2]'),\n",
       " Text(197.983,120.236,'gini = 0.0\\nsamples = 2\\nvalue = [0, 2]'),\n",
       " Text(205.454,120.236,'gini = 0.0\\nsamples = 1\\nvalue = [1, 0]'),\n",
       " Text(245.61,168.33,'X[6] <= 0.436\\ngini = 0.484\\nsamples = 102\\nvalue = [42, 60]'),\n",
       " Text(227.867,152.299,'X[5] <= 41.8\\ngini = 0.491\\nsamples = 51\\nvalue = [29, 22]'),\n",
       " Text(220.396,136.267,'X[5] <= 28.5\\ngini = 0.444\\nsamples = 42\\nvalue = [28, 14]'),\n",
       " Text(216.66,120.236,'gini = 0.0\\nsamples = 3\\nvalue = [0, 3]'),\n",
       " Text(224.131,120.236,'X[4] <= 460.0\\ngini = 0.405\\nsamples = 39\\nvalue = [28, 11]'),\n",
       " Text(220.396,104.204,'X[7] <= 42.0\\ngini = 0.368\\nsamples = 37\\nvalue = [28, 9]'),\n",
       " Text(205.454,88.1729,'X[0] <= 4.5\\ngini = 0.252\\nsamples = 27\\nvalue = [23, 4]'),\n",
       " Text(194.247,72.1414,'X[6] <= 0.41\\ngini = 0.105\\nsamples = 18\\nvalue = [17, 1]'),\n",
       " Text(190.511,56.11,'gini = 0.0\\nsamples = 16\\nvalue = [16, 0]'),\n",
       " Text(197.983,56.11,'X[7] <= 23.5\\ngini = 0.5\\nsamples = 2\\nvalue = [1, 1]'),\n",
       " Text(194.247,40.0786,'gini = 0.0\\nsamples = 1\\nvalue = [1, 0]'),\n",
       " Text(201.718,40.0786,'gini = 0.0\\nsamples = 1\\nvalue = [0, 1]'),\n",
       " Text(216.66,72.1414,'X[5] <= 37.65\\ngini = 0.444\\nsamples = 9\\nvalue = [6, 3]'),\n",
       " Text(212.925,56.11,'X[7] <= 25.5\\ngini = 0.375\\nsamples = 8\\nvalue = [6, 2]'),\n",
       " Text(209.189,40.0786,'gini = 0.0\\nsamples = 1\\nvalue = [0, 1]'),\n",
       " Text(216.66,40.0786,'X[3] <= 7.5\\ngini = 0.245\\nsamples = 7\\nvalue = [6, 1]'),\n",
       " Text(212.925,24.0471,'X[2] <= 74.0\\ngini = 0.5\\nsamples = 2\\nvalue = [1, 1]'),\n",
       " Text(209.189,8.01571,'gini = 0.0\\nsamples = 1\\nvalue = [0, 1]'),\n",
       " Text(216.66,8.01571,'gini = 0.0\\nsamples = 1\\nvalue = [1, 0]'),\n",
       " Text(220.396,24.0471,'gini = 0.0\\nsamples = 5\\nvalue = [5, 0]'),\n",
       " Text(220.396,56.11,'gini = 0.0\\nsamples = 1\\nvalue = [0, 1]'),\n",
       " Text(235.338,88.1729,'X[5] <= 35.6\\ngini = 0.5\\nsamples = 10\\nvalue = [5, 5]'),\n",
       " Text(231.602,72.1414,'X[5] <= 29.65\\ngini = 0.408\\nsamples = 7\\nvalue = [5, 2]'),\n",
       " Text(227.867,56.11,'gini = 0.0\\nsamples = 1\\nvalue = [0, 1]'),\n",
       " Text(235.338,56.11,'X[6] <= 0.31\\ngini = 0.278\\nsamples = 6\\nvalue = [5, 1]'),\n",
       " Text(231.602,40.0786,'gini = 0.0\\nsamples = 5\\nvalue = [5, 0]'),\n",
       " Text(239.073,40.0786,'gini = 0.0\\nsamples = 1\\nvalue = [0, 1]'),\n",
       " Text(239.073,72.1414,'gini = 0.0\\nsamples = 3\\nvalue = [0, 3]'),\n",
       " Text(227.867,104.204,'gini = 0.0\\nsamples = 2\\nvalue = [0, 2]'),\n",
       " Text(235.338,136.267,'X[6] <= 0.373\\ngini = 0.198\\nsamples = 9\\nvalue = [1, 8]'),\n",
       " Text(231.602,120.236,'gini = 0.0\\nsamples = 8\\nvalue = [0, 8]'),\n",
       " Text(239.073,120.236,'gini = 0.0\\nsamples = 1\\nvalue = [1, 0]'),\n",
       " Text(263.354,152.299,'X[0] <= 1.5\\ngini = 0.38\\nsamples = 51\\nvalue = [13, 38]'),\n",
       " Text(254.015,136.267,'X[1] <= 140.5\\ngini = 0.49\\nsamples = 14\\nvalue = [8, 6]'),\n",
       " Text(250.28,120.236,'X[6] <= 0.818\\ngini = 0.375\\nsamples = 8\\nvalue = [2, 6]'),\n",
       " Text(246.544,104.204,'X[3] <= 34.0\\ngini = 0.444\\nsamples = 3\\nvalue = [2, 1]'),\n",
       " Text(242.809,88.1729,'gini = 0.0\\nsamples = 2\\nvalue = [2, 0]'),\n",
       " Text(250.28,88.1729,'gini = 0.0\\nsamples = 1\\nvalue = [0, 1]'),\n",
       " Text(254.015,104.204,'gini = 0.0\\nsamples = 5\\nvalue = [0, 5]'),\n",
       " Text(257.751,120.236,'gini = 0.0\\nsamples = 6\\nvalue = [6, 0]'),\n",
       " Text(272.693,136.267,'X[4] <= 333.5\\ngini = 0.234\\nsamples = 37\\nvalue = [5, 32]'),\n",
       " Text(265.222,120.236,'X[5] <= 28.85\\ngini = 0.161\\nsamples = 34\\nvalue = [3, 31]'),\n",
       " Text(261.486,104.204,'gini = 0.0\\nsamples = 1\\nvalue = [1, 0]'),\n",
       " Text(268.957,104.204,'X[5] <= 45.05\\ngini = 0.114\\nsamples = 33\\nvalue = [2, 31]'),\n",
       " Text(265.222,88.1729,'X[5] <= 40.05\\ngini = 0.061\\nsamples = 32\\nvalue = [1, 31]'),\n",
       " Text(261.486,72.1414,'gini = 0.0\\nsamples = 26\\nvalue = [0, 26]'),\n",
       " Text(268.957,72.1414,'X[5] <= 40.7\\ngini = 0.278\\nsamples = 6\\nvalue = [1, 5]'),\n",
       " Text(265.222,56.11,'gini = 0.0\\nsamples = 1\\nvalue = [1, 0]'),\n",
       " Text(272.693,56.11,'gini = 0.0\\nsamples = 5\\nvalue = [0, 5]'),\n",
       " Text(272.693,88.1729,'gini = 0.0\\nsamples = 1\\nvalue = [1, 0]'),\n",
       " Text(280.164,120.236,'X[2] <= 64.0\\ngini = 0.444\\nsamples = 3\\nvalue = [2, 1]'),\n",
       " Text(276.428,104.204,'gini = 0.0\\nsamples = 1\\nvalue = [0, 1]'),\n",
       " Text(283.899,104.204,'gini = 0.0\\nsamples = 2\\nvalue = [2, 0]'),\n",
       " Text(328.726,184.361,'X[4] <= 629.5\\ngini = 0.272\\nsamples = 74\\nvalue = [12, 62]'),\n",
       " Text(324.99,168.33,'X[7] <= 62.5\\ngini = 0.239\\nsamples = 72\\nvalue = [10, 62]'),\n",
       " Text(315.651,152.299,'X[5] <= 45.95\\ngini = 0.205\\nsamples = 69\\nvalue = [8, 61]'),\n",
       " Text(308.18,136.267,'X[4] <= 131.0\\ngini = 0.168\\nsamples = 65\\nvalue = [6, 59]'),\n",
       " Text(304.445,120.236,'X[2] <= 92.0\\ngini = 0.305\\nsamples = 32\\nvalue = [6, 26]'),\n",
       " Text(295.106,104.204,'X[7] <= 49.5\\ngini = 0.238\\nsamples = 29\\nvalue = [4, 25]'),\n",
       " Text(287.635,88.1729,'X[2] <= 71.0\\ngini = 0.147\\nsamples = 25\\nvalue = [2, 23]'),\n",
       " Text(283.899,72.1414,'X[2] <= 67.0\\ngini = 0.408\\nsamples = 7\\nvalue = [2, 5]'),\n",
       " Text(280.164,56.11,'gini = 0.0\\nsamples = 5\\nvalue = [0, 5]'),\n",
       " Text(287.635,56.11,'gini = 0.0\\nsamples = 2\\nvalue = [2, 0]'),\n",
       " Text(291.37,72.1414,'gini = 0.0\\nsamples = 18\\nvalue = [0, 18]'),\n",
       " Text(302.577,88.1729,'X[2] <= 80.0\\ngini = 0.5\\nsamples = 4\\nvalue = [2, 2]'),\n",
       " Text(298.842,72.1414,'gini = 0.0\\nsamples = 2\\nvalue = [0, 2]'),\n",
       " Text(306.313,72.1414,'gini = 0.0\\nsamples = 2\\nvalue = [2, 0]'),\n",
       " Text(313.784,104.204,'X[1] <= 172.5\\ngini = 0.444\\nsamples = 3\\nvalue = [2, 1]'),\n",
       " Text(310.048,88.1729,'gini = 0.0\\nsamples = 1\\nvalue = [0, 1]'),\n",
       " Text(317.519,88.1729,'gini = 0.0\\nsamples = 2\\nvalue = [2, 0]'),\n",
       " Text(311.916,120.236,'gini = 0.0\\nsamples = 33\\nvalue = [0, 33]'),\n",
       " Text(323.122,136.267,'X[4] <= 127.5\\ngini = 0.5\\nsamples = 4\\nvalue = [2, 2]'),\n",
       " Text(319.387,120.236,'gini = 0.0\\nsamples = 2\\nvalue = [0, 2]'),\n",
       " Text(326.858,120.236,'gini = 0.0\\nsamples = 2\\nvalue = [2, 0]'),\n",
       " Text(334.329,152.299,'X[2] <= 86.0\\ngini = 0.444\\nsamples = 3\\nvalue = [2, 1]'),\n",
       " Text(330.593,136.267,'gini = 0.0\\nsamples = 2\\nvalue = [2, 0]'),\n",
       " Text(338.064,136.267,'gini = 0.0\\nsamples = 1\\nvalue = [0, 1]'),\n",
       " Text(332.461,168.33,'gini = 0.0\\nsamples = 2\\nvalue = [2, 0]')]"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "tree.plot_tree(clf)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [],
   "source": [
    "y_pred_dt=rf1.predict(x_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.metrics import accuracy_score\n",
    "dt_score = accuracy_score(y_pred_dt,y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "77.92207792207793"
      ]
     },
     "execution_count": 66,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dt_score*100"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Naive Bayes Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.naive_bayes import GaussianNB"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "metadata": {},
   "outputs": [],
   "source": [
    "gnb = GaussianNB()\n",
    "y_pred_gnb = gnb.fit(x_train, y_train).predict(x_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of mislabeled points out of a total 231 points : 53\n"
     ]
    }
   ],
   "source": [
    " print(\"Number of mislabeled points out of a total %d points : %d\"\n",
    "...       % (x_test.shape[0], (y_test != y_pred).sum()))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.7705627705627706"
      ]
     },
     "execution_count": 83,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.metrics import accuracy_score\n",
    "gnb_score = accuracy_score(y_pred_gnb,y_test)\n",
    "gnb_score"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Accuracy Score of the models\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The accuracy score of the logistic model is:  76.19\n",
      "The accuracy score of Decision tree model is:  77.92\n",
      "The accuracy score of Random forest model is: 76.62\n",
      "The accuracy score of Gaussian Naive Bayes Model is:  77.06\n"
     ]
    }
   ],
   "source": [
    "print(\"The accuracy score of the logistic model is: \", round(log_reg_score*100,2))\n",
    "print(\"The accuracy score of Decision tree model is: \",round(dt_score*100,2))\n",
    "print(\"The accuracy score of Random forest model is:\", round(rf_score*100,2))\n",
    "print(\"The accuracy score of Gaussian Naive Bayes Model is: \", round(gnb_score*100,2))"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
